<?php

namespace hr\modules\connect\components;

use Yii;
use yii\base\Component;
use yii\base\Exception;
use yii\helpers\ArrayHelper;

class Api extends Component
{

    private $url;
    private $segment = 'admin/API/accounts/';
    private $clientType = 'WINPC';
    private $userName = '';
    private $password = '';
    private $temp = '';

    public $token = '';
    public $success = false;


    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->url = Yii::$app->params['connectUrl'];
        $this->userName = Yii::$app->params['connectUserName'];
        $this->password = Yii::$app->params['connectPassword'];

    }

    public function auth()
    {
        //1 authorize

        $server_output = $this->authorize1();

        //2 authorize
        $server_output = $this->authorize2($server_output);

        //3 updateToken
        $this->updateToken($server_output);

        return $this->success;
    }

    private function authorize1()
    {

        $ch = curl_init();

        $data_string = <<<ASD
{
 "userName": "{$this->userName}",
 "ipAddress": "",
 "clientType": "{$this->clientType}"
}
ASD;

        curl_setopt($ch, CURLOPT_URL, $this->url . $this->segment . 'authorize');

        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json;charset=UTF-8',
                'Content-Length: ' . strlen($data_string))
        );
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $server_output = curl_exec($ch);

        $server_output = (array)json_decode($server_output);


        if (isset($server_output['randomKey'])) {


            curl_close($ch);

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }

    }

    private function authorize2($server_output)
    {


        $realm = $server_output['realm'];
        $randomKey = $server_output['randomKey'];

        $temp = md5($this->password);
        $temp = md5($this->userName . $temp);
        $temp = md5($temp);
        $temp = md5($this->userName . ":" . $realm . ":" . $temp);
        $signature = md5($temp . ":" . $randomKey);

        $ch = curl_init();

        $data_string = <<<ASD
{
  "userName": "{$this->userName}",
  "randomKey": "{$randomKey}",
  "mac": "",
  "ipAddress": "",
  "signature": "{$signature}",
  "clientType": "{$this->clientType}",
  "encryptType": "MD5",
  "userType": "0"
}
ASD;


        curl_setopt($ch, CURLOPT_URL, $this->url . $this->segment . 'authorize');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json;charset=UTF-8',
                'Content-Length: ' . strlen($data_string))
        );
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);


        $server_output = curl_exec($ch);

        $server_output = (array)json_decode($server_output);

        if (isset($server_output['token'])) {

            curl_close($ch);

            $this->temp = $temp;
            $this->token = $server_output['token'];

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }

    }

    private function updateToken($server_output)
    {

        $signature = md5($this->temp . ":" . $server_output['token']);


        $ch = curl_init();

        $data_string = <<<ASD
{
  "signature": "{$signature}"
}
ASD;

        curl_setopt($ch, CURLOPT_URL, $this->url . $this->segment . 'updateToken');
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json;charset=UTF-8',
                'X-Subject-Token: ' . $server_output['token'],
                'Content-Length: ' . strlen($data_string))
        );
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $this->token = $server_output['token'];

        $server_output = curl_exec($ch);

        $server_output = (array)json_decode($server_output);

        if ($server_output['desc'] == 'Success') {

            $this->success = true;

        } else {
            $this->showError($ch, $server_output, $verbose);
        }
    }

    private function showError($ch, $server_output, $verbose)
    {

        if ($server_output === FALSE) {
            printf("cUrl error (#%d): %s<br>\n", curl_errno($ch),
                htmlspecialchars(curl_error($ch)));
        }
        rewind($verbose);
        $verboseLog = stream_get_contents($verbose);

        curl_close($ch);

        $error = "Verbose information:\n<pre>" . htmlspecialchars($verboseLog) . "</pre>\n";


        throw new Exception($error);

        Yii::$app->end();

    }

    public function getDevices()
    {

        $ch = curl_init();


        $data_string = <<<ASD
{
 "orgCode": "",
 "deviceCodes": [],
 "categories": []
}
ASD;

        curl_setopt($ch, CURLOPT_URL, $this->url . 'admin/API/tree/devices');

        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json;charset=UTF-8',
            'X-Subject-Token: ' . $this->token,
            'Content-Length: ' . strlen($data_string)
        ));
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $server_output = curl_exec($ch);

        $server_output = (array)json_decode($server_output);


        if (isset($server_output['desc']) && $server_output['desc'] == 'Success') {


            curl_close($ch);

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }
    }


    public function getPersonTypes()
    {

        $ch = curl_init();


        curl_setopt($ch, CURLOPT_URL, $this->url . 'admin/API/person/personTypes');

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json;charset=UTF-8',
            'X-Subject-Token: ' . $this->token
        ));
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $server_output = curl_exec($ch);

        $server_output = (array)json_decode($server_output);


        if (isset($server_output['desc']) && $server_output['desc'] == 'Success') {


            curl_close($ch);

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }
    }

    public function getDevice($deviceCode)
    {
        $ch = curl_init();


        $params = [
            'protocolType' => 'Dahua2',
            'fetchFlag' => 0,
            'loginName' => 'admin',
            'devicePort' => '37777',
            'loginPass' => '8c8944adede71eea53bec5d7624ea53a',
            'deviceIp' => '213.230.97.136'
        ];

        curl_setopt($ch, CURLOPT_URL, $this->url . 'admin/API/devicesManager/devices/' . $deviceCode . '?' . http_build_query($params));

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json;charset=UTF-8',
            'X-Subject-Token: ' . $this->token
        ));
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $server_output = curl_exec($ch);

        $server_output = (array)json_decode($server_output);


        if (isset($server_output['desc']) && $server_output['desc'] == 'Success') {


            curl_close($ch);

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }


    }


    public function recognitions($filter = [])
    {
        $ch = curl_init();
        $date = date('Y-m-d');
        $date = '2020-01-15';

        $today_date = $date . ' 00:00:00';
        $b_date = $date . ' 07:00:00';
        $e_date = $date . ' 21:00:00';

        // prd($e_date);

        $day = strtotime($today_date);
        $t_date = strtotime($b_date);
        $d_date = strtotime($e_date);

//        prd(app()->formatter->asDatetime('1571184000'));

        $params = [
            // 'nowTime' => $day.'000',
            'pageSize' => '',
            'page' => 1,
//            'similarity' => 36,
            // 'similarity' => 0,
            'personName' => '',
            'gender' => '',
            'personId' => '',
            'personTypeIds' => '1',
            // 'beginTime' => $t_date,
            // 'endTime' => $d_date,
            'beginAge' => '',
            'endAge' => '',
            'channelIds' => '1000024$1$0$0,1000024$1$0$1',
            // 'channelIds' => '1000023$1$0$1',
            // 'channelIds' => '1000023$1$0$1,1000023$1$0$0',
//            'channelIds' => '1,2',
//            'channelIds' => '1000000$1$0$0',
//            'channelIds' => '1000000$1$0$1',
//            'channelNames' => 'Entrance,Exit',
//            'channelIds' => '1000000$3$0$0,1000000$3$0$1,1000000$3$0$2,1000000$3$0$3'
//            'channelIds' => '1000000$4$0$0,1000000$4$0$1'
        ];

        if (isset($filter['page'])) {
            $params['page'] = $filter['page'];
        }

        if (isset($filter['pageSize'])) {
            $params['pageSize'] = $filter['pageSize'];
        }

//        prd($params);

        curl_setopt($ch, CURLOPT_URL, $this->url . 'admin/API/face/recognitions' . '?' . http_build_query($params));

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json;charset=UTF-8',
            'X-Subject-Token: ' . $this->token
        ));
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $server_output = curl_exec($ch);

        $server_output = ArrayHelper::toArray(json_decode($server_output));

        if (isset($server_output['desc']) && $server_output['desc'] == 'Success') {


            curl_close($ch);

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }
    }

    public function reportDay()
    {
        $ch = curl_init();

        $params = [
            'time' => '1571414400',
            'pageSize' => 20,
            'page' => 1,
            'startTime' => '1571386800',
            'endTime' => '1571390400',
            'type' => 0,
            'channelIds' => '1000001$1$0$0,1000001$1$0$1'
        ];

        curl_setopt($ch, CURLOPT_URL, $this->url . 'admin/API/face/report/day/list' . '?' . http_build_query($params));

        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json;charset=UTF-8',
            'X-Subject-Token: ' . $this->token
        ));
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

        curl_setopt($ch, CURLOPT_VERBOSE, true);
        $verbose = fopen('php://temp', 'w+');
        curl_setopt($ch, CURLOPT_STDERR, $verbose);

        $server_output = curl_exec($ch);

        $server_output = ArrayHelper::toArray(json_decode($server_output));

        if (isset($server_output['desc']) && $server_output['desc'] == 'Success') {


            curl_close($ch);

            return $server_output;

        } else {

            $this->showError($ch, $server_output, $verbose);

        }
    }

}
